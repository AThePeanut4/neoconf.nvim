{"properties": {"haskell.plugin.ghcide-completions.globalOn": {"description": "Enables ghcide-completions plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.tactics.config.auto_gas": {"scope": "resource", "type": "integer", "markdownDescription": "The depth of the search tree when performing \"Attempt to fill hole\". Bigger values will be able to derive more solutions, but will take exponentially more time.", "default": 4}, "haskell.plugin.ghcide-type-lenses.globalOn": {"description": "Enables ghcide-type-lenses plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.eval.config.diff": {"scope": "resource", "type": "boolean", "markdownDescription": "Enable the diff output (WAS/NOW) of eval lenses", "default": true}, "haskell.plugin.rename.globalOn": {"description": "Enables rename plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.splice.globalOn": {"description": "Enables splice plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.rename.config.crossModule": {"scope": "resource", "type": "boolean", "markdownDescription": "Enable experimental cross-module renaming", "default": false}, "haskell.plugin.hlint.codeActionsOn": {"description": "Enables hlint code actions", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.tactics.config.timeout_duration": {"scope": "resource", "type": "integer", "markdownDescription": "The timeout for Wingman actions, in seconds", "default": 2}, "haskell.releasesURL": {"description": "An optional URL to override where ghcup checks for HLS-GHC compatibility list (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/hls-metadata-0.0.1.json)", "scope": "resource", "type": "string", "default": ""}, "haskell.ghcupExecutablePath": {"scope": "resource", "type": "string", "markdownDescription": "Manually set a ghcup executable path.", "default": ""}, "haskell.checkProject": {"description": "Whether to typecheck the entire project on load. It could drive to bad performance in large projects.", "scope": "resource", "type": "boolean", "default": true}, "haskell.serverExecutablePath": {"scope": "resource", "type": "string", "markdownDescription": "Manually set a language server executable. Can be something on the $PATH or the full path to the executable itself. Works with `~,` `${HOME}` and `${workspaceFolder}`. **Deprecated scope**: This option will be set to `machine` scope in a future release, so it can be changed only globally, not per workspace.", "default": ""}, "haskell.plugin.ghcide-hover-and-symbols.symbolsOn": {"description": "Enables ghcide-hover-and-symbols symbols", "scope": "resource", "type": "boolean", "default": true}, "haskell.maxCompletions": {"description": "Maximum number of completions sent to the editor.", "scope": "resource", "type": "integer", "default": 40}, "haskell.plugin.eval.config.exception": {"scope": "resource", "type": "boolean", "markdownDescription": "Enable marking exceptions with `*** Exception:` similarly to doctest and GHCi.", "default": false}, "haskell.serverExtraArgs": {"scope": "resource", "type": "string", "markdownDescription": "Pass additional arguments to the language server.", "default": ""}, "haskell.logFile": {"description": "If set, redirects the logs to a file.", "scope": "resource", "type": "string", "default": ""}, "haskell.plugin.qualifyImportedNames.globalOn": {"description": "Enables qualifyImportedNames plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.tactics.config.proofstate_styling": {"scope": "resource", "type": "boolean", "markdownDescription": "Should Wingman emit styling markup when showing metaprogram proof states?", "default": true}, "haskell.plugin.tactics.config.max_use_ctor_actions": {"scope": "resource", "type": "integer", "markdownDescription": "Maximum number of `Use constructor <x>` code actions that can appear", "default": 5}, "haskell.trace.client": {"description": "Sets the log level in the client side.", "enum": ["off", "error", "info", "debug"], "scope": "resource", "type": "string", "default": "info"}, "haskell.plugin.changeTypeSignature.globalOn": {"description": "Enables changeTypeSignature plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.ghcide-code-actions-bindings.globalOn": {"description": "Enables ghcide-code-actions-bindings plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.openDocumentationInHackage": {"description": "When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode.", "scope": "resource", "type": "boolean", "default": true}, "haskell.trace.server": {"description": "Traces the communication between VS Code and the language server.", "enum": ["off", "messages", "verbose"], "scope": "resource", "type": "string", "default": "off"}, "haskell.formattingProvider": {"description": "The formatter to use when formatting a document or range. Ensure the plugin is enabled.", "enum": ["brittany", "floskell", "fourmolu", "ormolu", "stylish-haskell", "none"], "scope": "resource", "type": "string", "default": "ormolu"}, "haskell.plugin.alternateNumberFormat.globalOn": {"description": "Enables alternateNumberFormat plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.ghcide-completions.config.autoExtendOn": {"scope": "resource", "type": "boolean", "markdownDescription": "Extends the import list automatically when completing a out-of-scope identifier", "default": true}, "haskell.manageHLS": {"description": "How to manage/find HLS installations.", "enum": ["GHCup", "PATH"], "scope": "resource", "type": "string", "enumDescriptions": ["Will use ghcup and manage Haskell toolchain in the default location (usually '~/.ghcup')", "Discovers HLS and other executables in system PATH"], "default": "PATH"}, "haskell.plugin.ghcide-hover-and-symbols.hoverOn": {"description": "Enables ghcide-hover-and-symbols hover", "scope": "resource", "type": "boolean", "default": true}, "haskell.releasesDownloadStoragePath": {"scope": "resource", "type": "string", "markdownDescription": "An optional path where downloaded metadata will be stored. Check the default value [here](https://github.com/haskell/vscode-haskell#downloaded-binaries)", "default": ""}, "haskell.plugin.callHierarchy.globalOn": {"description": "Enables callHierarchy plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.haddockComments.globalOn": {"description": "Enables haddockComments plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.refineImports.codeLensOn": {"description": "Enables refineImports code lenses", "scope": "resource", "type": "boolean", "default": true}, "haskell.promptBeforeDownloads": {"scope": "machine", "type": "boolean", "markdownDescription": "Prompt before performing any downloads.", "default": "true"}, "haskell.plugin.eval.globalOn": {"description": "Enables eval plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.retrie.globalOn": {"description": "Enables retrie plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.ghcide-code-actions-fill-holes.globalOn": {"description": "Enables ghcide-code-actions-fill-holes plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.serverEnvironment": {"scope": "resource", "type": "object", "markdownDescription": "Define environment variables for the language server.", "default": {}}, "haskell.plugin.ghcide-completions.config.snippetsOn": {"scope": "resource", "type": "boolean", "markdownDescription": "Inserts snippets when using code completions", "default": true}, "haskell.plugin.refineImports.codeActionsOn": {"description": "Enables refineImports code actions", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.tactics.codeLensOn": {"description": "Enables tactics code lenses", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.hlint.diagnosticsOn": {"description": "Enables hlint diagnostics", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.tactics.config.hole_severity": {"description": "The severity to use when showing hole diagnostics. These are noisy, but some editors don't allow jumping to all severities.", "enum": [1, 2, 3, 4, null], "scope": "resource", "type": "string", "enumDescriptions": ["error", "warning", "info", "hint", "none"], "default": null}, "haskell.plugin.importLens.codeLensOn": {"description": "Enables importLens code lenses", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.tactics.codeActionsOn": {"description": "Enables tactics code actions", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.pragmas.codeActionsOn": {"description": "Enables pragmas code actions", "scope": "resource", "type": "boolean", "default": true}, "haskell.toolchain": {"description": "When manageHLS is set to GHCup, this can overwrite the automatic toolchain configuration with a more specific one. When a tool is omitted, the extension will manage the version (for 'ghc' we try to figure out the version the project requires). The format is '{\"tool\": \"version\", ...}'. 'version' accepts all identifiers that 'ghcup' accepts.", "scope": "resource", "type": "object", "default": {}}, "haskell.metadataURL": {"description": "An optional URL to override where ghcup checks for tool download info (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-0.0.7.yaml)", "scope": "resource", "type": "string", "default": ""}, "haskell.plugin.class.globalOn": {"description": "Enables class plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.ghcide-code-actions-type-signatures.globalOn": {"description": "Enables ghcide-code-actions-type-signatures plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.openSourceInHackage": {"description": "When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode.", "scope": "resource", "type": "boolean", "default": true}, "haskell.upgradeGHCup": {"description": "Whether to upgrade GHCup automatically when 'manageHLS' is set to 'GHCup'.", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.ghcide-code-actions-imports-exports.globalOn": {"description": "Enables ghcide-code-actions-imports-exports plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.tactics.hoverOn": {"description": "Enables tactics hover", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.importLens.codeActionsOn": {"description": "Enables importLens code actions", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.ghcide-type-lenses.config.mode": {"description": "Control how type lenses are shown", "enum": ["always", "exported", "diagnostics"], "scope": "resource", "type": "string", "enumDescriptions": ["Always displays type lenses of global bindings", "Only display type lenses of exported global bindings", "Follows error messages produced by GHC about missing signatures"], "default": "always"}, "haskell.plugin.hlint.config.flags": {"scope": "resource", "type": "array", "markdownDescription": "Flags used by hlint", "default": []}, "haskell.plugin.moduleName.globalOn": {"description": "Enables moduleName plugin", "scope": "resource", "type": "boolean", "default": true}, "haskell.plugin.pragmas.completionOn": {"description": "Enables pragmas completions", "scope": "resource", "type": "boolean", "default": true}}, "description": "Haskell language support powered by the Haskell Language Server", "$schema": "http://json-schema.org/draft-07/schema#"}