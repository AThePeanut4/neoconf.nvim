{"properties": {"eslint.nodeEnv": {"scope": "resource", "type": ["string", "null"], "markdownDescription": "The value of `NODE_ENV` to use when running eslint tasks.", "default": null}, "eslint.probe": {"description": "An array of language ids for which the extension should probe if support is installed.", "scope": "resource", "type": "array", "default": ["javascript", "javascriptreact", "typescript", "typescriptreact", "html", "vue", "markdown"], "items": {"type": "string"}}, "eslint.codeActionsOnSave.mode": {"enum": ["all", "problems"], "scope": "resource", "type": "string", "markdownDescription": "Specifies the code action mode. Possible values are 'all' and 'problems'.", "enumDescriptions": ["Fixes all possible problems in the file. This option might take some time.", "Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster."], "default": "all"}, "eslint.onIgnoredFiles": {"description": "Whether ESLint should issue a warning on ignored files.", "enum": ["warn", "off"], "scope": "resource", "type": "string", "default": "off"}, "eslint.format.enable": {"description": "Enables ESLint as a formatter.", "scope": "resource", "type": "boolean", "default": false}, "eslint.execArgv": {"scope": "machine-overridable", "anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "markdownDescription": "Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size", "default": null}, "eslint.useESLintClass": {"description": "Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.", "scope": "resource", "type": "boolean", "default": false}, "eslint.enable": {"description": "Controls whether eslint is enabled or not.", "scope": "resource", "type": "boolean", "default": true}, "eslint.runtime": {"scope": "machine-overridable", "type": ["string", "null"], "markdownDescription": "The location of the node binary to run ESLint under.", "default": null}, "eslint.codeAction.disableRuleComment": {"properties": {"location": {"description": "Configure the disable rule code action to insert the comment on the same line or a new line.", "enum": ["separateLine", "sameLine"], "type": "string", "default": "separateLine"}, "enable": {"description": "Show the disable code actions.", "type": "boolean", "default": true}, "commentStyle": {"definition": "The comment style to use when disabling a rule on a specific line.", "type": "string", "default": "line", "enum": ["line", "block"]}}, "scope": "resource", "additionalProperties": false, "type": "object", "markdownDescription": "Show disable lint rule in the quick fix menu.", "default": {"location": "separateLine", "enable": true, "commentStyle": "line"}}, "eslint.workingDirectories": {"scope": "resource", "type": "array", "markdownDescription": "Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.", "items": {"anyOf": [{"type": "string"}, {"properties": {"mode": {"enum": ["auto", "location"], "type": "string", "default": "location"}}, "required": ["mode"], "type": "object"}, {"properties": {"directory": {"description": "The working directory to use if a file's path starts with this directory.", "type": "string"}, "changeProcessCWD": {"description": "Whether the process's cwd should be changed as well.", "type": "boolean"}}, "deprecationMessage": "Use the new !cwd form.", "required": ["directory"], "type": "object"}, {"properties": {"directory": {"description": "The working directory to use if a file's path starts with this directory.", "type": "string"}, "!cwd": {"description": "Set to true if ESLint shouldn't change the working directory.", "type": "boolean"}}, "required": ["directory"], "type": "object"}, {"properties": {"pattern": {"description": "A glob pattern to match a working directory.", "type": "string"}, "!cwd": {"description": "Set to true if ESLint shouldn't change the working directory.", "type": "boolean"}}, "required": ["pattern"], "type": "object"}]}}, "eslint.lintTask.enable": {"description": "Controls whether a task for linting the whole workspace will be available.", "scope": "resource", "type": "boolean", "default": false}, "eslint.migration.2_x": {"description": "Whether ESlint should migrate auto fix on save settings.", "enum": ["off", "on"], "scope": "application", "type": "string", "default": "on"}, "eslint.trace.server": {"description": "Traces the communication between VSCode and the eslint linter service.", "scope": "window", "anyOf": [{"enum": ["off", "messages", "verbose"], "type": "string", "default": "off"}, {"properties": {"format": {"enum": ["text", "json"], "type": "string", "default": "text"}, "verbosity": {"enum": ["off", "messages", "verbose"], "type": "string", "default": "off"}}, "type": "object"}], "default": "off"}, "eslint.nodePath": {"scope": "machine-overridable", "type": ["string", "null"], "markdownDescription": "A path added to `NODE_PATH` when resolving the eslint module.", "default": null}, "eslint.provideLintTask": {"deprecationMessage": "This option is deprecated. Use eslint.lintTask.enable instead.", "description": "Controls whether a task for linting the whole workspace will be available.", "scope": "resource", "type": "boolean", "default": false}, "eslint.lintTask.options": {"scope": "resource", "type": "string", "markdownDescription": "Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).", "default": "."}, "eslint.codeAction.showDocumentation": {"properties": {"enable": {"description": "Show the documentation code actions.", "type": "boolean", "default": true}}, "scope": "resource", "additionalProperties": false, "type": "object", "markdownDescription": "Show open lint rule documentation web page in the quick fix menu.", "default": {"enable": true}}, "eslint.autoFixOnSave": {"deprecationMessage": "The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.", "description": "Turns auto fix on save on or off.", "scope": "resource", "type": "boolean", "default": false}, "eslint.run": {"description": "Run the linter on save (onSave) or on type (onType)", "enum": ["onSave", "onType"], "scope": "resource", "type": "string", "default": "onType"}, "eslint.alwaysShowStatus": {"description": "Always show the ESlint status bar item.", "scope": "window", "type": "boolean", "default": false}, "eslint.notebooks.rules.customizations": {"description": "A special rules customization section for text cells in notebook documents.", "scope": "resource", "type": "array", "items": {"properties": {"rule": {"type": "string"}, "severity": {"enum": ["downgrade", "error", "info", "default", "upgrade", "warn", "off"], "type": "string"}}, "type": "object"}}, "eslint.packageManager": {"description": "The package manager you use to install node modules.", "enum": ["npm", "yarn", "pnpm"], "scope": "resource", "type": "string", "default": "npm"}, "eslint.rules.customizations": {"description": "Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.", "scope": "resource", "type": "array", "items": {"properties": {"rule": {"type": "string"}, "severity": {"enum": ["downgrade", "error", "info", "default", "upgrade", "warn", "off"], "type": "string"}}, "type": "object"}}, "eslint.validate": {"description": "An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.", "scope": "resource", "type": "array", "items": {"anyOf": [{"type": "string"}, {"properties": {"language": {"description": "The language id to be validated by ESLint.", "type": "string"}, "autoFix": {"description": "Whether auto fixes are provided for the language.", "type": "boolean"}}, "deprecationMessage": "Auto Fix is enabled by default. Use the single string form.", "type": "object"}]}}, "eslint.quiet": {"description": "Turns on quiet mode, which ignores warnings.", "scope": "resource", "type": "boolean", "default": false}, "eslint.codeActionsOnSave.rules": {"scope": "resource", "anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "markdownDescription": "The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration", "default": null}, "eslint.debug": {"scope": "window", "type": "boolean", "markdownDescription": "Enables ESLint debug mode (same as `--debug` on the command line)", "default": false}, "eslint.options": {"scope": "resource", "type": "object", "markdownDescription": "The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).", "default": {}}}, "description": "Integrates ESLint JavaScript into VS Code.", "$schema": "http://json-schema.org/draft-07/schema#"}