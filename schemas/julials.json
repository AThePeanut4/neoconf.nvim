{"properties":{"julia.runtimeCompletions":{"type":"boolean","default":false,"description":"Request runtime completions from the integrated REPL.","scope":"application"},"julia.persistentSession.shell":{"type":"string","default":"\/bin\/sh","scope":"machine","description":"Shell used to start the persistent session."},"julia.lint.run":{"type":"boolean","default":true,"description":"Run the linter on active files."},"julia.persistentSession.shellExecutionArgument":{"type":"string","default":"-c","scope":"machine","markdownDescription":"Argument to execute code in the configured shell, e.g. `-c` for sh-likes or `\/c` for `cmd`."},"julia.lint.missingrefs":{"type":"string","default":"none","description":"Highlight unknown symbols. The `symbols` option will not mark unknown fields.","enum":["none","symbols","all"]},"julia.persistentSession.tmuxSessionName":{"type":"string","default":"julia_vscode","scope":"machine-overridable","markdownDescription":"Name of the `tmux` session."},"julia.lint.disabledDirs":{"type":"array","default":["docs","test"],"markdownDescription":"Specifies sub-directories in [a package directory](https:\/\/docs.julialang.org\/en\/v1\/manual\/code-loading\/#Package-directories-1) where only basic linting is. This drastically lowers the chance for false positives."},"julia.lint.call":{"type":"boolean","default":true,"description":"This compares  call signatures against all known methods for the called function. Calls with too many or too few arguments, or unknown keyword parameters are highlighted."},"julia.lint.iter":{"type":"boolean","default":true,"description":"Check iterator syntax of loops. Will identify, for example, attempts to iterate over single values."},"julia.lint.nothingcomp":{"type":"boolean","default":true,"description":"Check for use of `==` rather than `===` when comparing against `nothing`. "},"julia.lint.constif":{"type":"boolean","default":true,"description":"Check for constant conditionals in if statements that result in branches never being reached.."},"julia.lint.lazy":{"type":"boolean","default":true,"description":"Check for deterministic lazy boolean operators."},"julia.lint.datadecl":{"type":"boolean","default":true,"description":"Check variables used in type declarations are datatypes."},"julia.lint.typeparam":{"type":"boolean","default":true,"description":"Check parameters declared in `where` statements or datatype declarations are used."},"julia.lint.modname":{"type":"boolean","default":true,"description":"Check submodule names do not shadow their parent's name."},"julia.symbolCacheDownload":{"type":["boolean","null"],"default":null,"description":"Download symbol server cache files from GitHub.","scope":"application"},"julia.symbolserverUpstream":{"type":"string","default":"https:\/\/www.julia-vscode.org\/symbolcache","description":"Symbol server cache download URL.","scope":"application"},"julia.enableCrashReporter":{"type":["boolean","null"],"default":null,"description":"Enable crash reports to be sent to the julia VS Code extension developers.","scope":"window"},"julia.NumThreads":{"type":["integer","string","null"],"default":null,"scope":"machine-overridable","markdownDescription":"Number of threads to use for Julia processes. A value of `auto` works on Julia versions that allow for `--threads=auto`."},"julia.enableTelemetry":{"type":["boolean","null"],"default":null,"description":"Enable usage data and errors to be sent to the julia VS Code extension developers.","scope":"window"},"julia.editor":{"type":"string","default":"code","markdownDescription":"Command to open files from the REPL (via setting the `JULIA_EDITOR` environment variable)."},"julia.trace.server":{"enum":["off","messages","verbose"],"description":"Traces the communication between VS Code and the language server.","type":"string","default":"off","scope":"window"},"julia.completionmode":{"enum":["exportedonly","import","qualify"],"description":"Sets the mode for completions.","enumDescriptions":["Show completions for the current namespace.","Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will result in the automatic insertion of an explicit `using` statement.","Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will complete to a qualified variable name."],"type":"string","default":"qualify","scope":"window"},"julia.useRevise":{"type":"boolean","default":true,"description":"Load Revise.jl on startup of the REPL."},"julia.usePlotPane":{"type":"boolean","default":true,"description":"Display plots within VS Code. Might require a restart of the Julia process."},"julia.showRuntimeDiagnostics":{"type":"boolean","default":true,"markdownDescription":"Enable display of runtime diagnostics. These diagnostics are provided by packages that overload a `show` method for the `application\/vnd.julia-vscode.diagnostics` MIME type."},"julia.cellDelimiters":{"type":"array","default":["^##(?!#)","^#(\\s?)%%","^#-"],"description":"Cell delimiter regular expressions for Julia files."},"julia.useProgressFrontend":{"type":"boolean","default":true,"markdownDescription":"Display [progress bars](https:\/\/github.com\/JunoLab\/ProgressLogging.jl) within VS Code."},"julia.additionalArgs":{"type":"array","default":[],"description":"Additional Julia arguments."},"julia.execution.resultType":{"enum":["REPL","inline","inline, errors in REPL","both"],"description":"Specifies how to show inline execution results","enumDescriptions":["Shows inline execution results in REPL","Shows inline execution results as inline bubbles","Shows inline execution results in REPL and inline bubbles"],"type":"string","default":"both"},"julia.environmentPath":{"type":["string","null"],"default":null,"description":"Path to a julia environment. VS Code needs to be reloaded for changes to take effect.","scope":"window"},"julia.workspace.showModules":{"type":"boolean","default":true,"description":"Show top-level modules in the workspace.","scope":"application"},"julia.useCustomSysimage":{"type":"boolean","default":false,"description":"Use an existing custom sysimage when starting the REPL","scope":"application"},"julia.plots.path":{"type":"string","description":"The output directory to save plots to","scope":"window"},"julia.debuggerDefaultCompiled":{"type":"array","default":["Base.","-Base.!","-Base.all","-Base.all!","-Base.any","-Base.any!","-Base.cd","-Base.iterate","-Base.collect","-Base.collect_similar","-Base._collect","-Base.collect_to!","-Base.collect_to_with_first!","-Base.filter","-Base.filter!","-Base.foreach","-Base.findall","-Base.findfirst","-Base.findlast","-Base.findnext","-Base.findprev","-Base.Generator","-Base.map","-Base.map!","-Base.maximum!","-Base.minimum!","-Base.mktemp","-Base.mktempdir","-Base.open","-Base.prod!","-Base.redirect_stderr","-Base.redirect_stdin","-Base.redirect_stdout","-Base.reenable_sigint","-Base.setindex!","-Base.setprecision","-Base.setrounding","-Base.show","-Base.sprint","-Base.sum","-Base.sum!","-Base.task_local_storage","-Base.timedwait","-Base.withenv","-Base.Broadcast","Core","Core.Compiler.","Core.IR","Core.Intrinsics","DelimitedFiles","Distributed","LinearAlgebra.","Serialization","Statistics","-Statistics.mean","SparseArrays","Mmap"],"description":"Functions or modules that are set to compiled mode when setting the defaults.","scope":"window"},"julia.deleteJuliaCovFiles":{"type":"boolean","default":true,"description":"Delete Julia .cov files when running tests with coverage, leaving only a .lcov file behind.","scope":"window"},"julia.execution.codeInREPL":{"type":"boolean","default":false,"description":"Print executed code in REPL and append it to the REPL history.","scope":"window"},"julia.persistentSession.alwaysCopy":{"type":"boolean","default":false,"scope":"application","description":"Always copy the command for connecting to an external REPL to the clipboard."},"julia.execution.saveOnEval":{"type":"boolean","default":false,"scope":"window","markdownDescription":"Save file before execution"},"julia.persistentSession.warnOnKill":{"type":"boolean","default":true,"scope":"application","description":"Warn when stopping a persistent session."},"julia.execution.inlineResultsForCellEvaluation":{"type":"boolean","default":false,"scope":"window","markdownDescription":"Show separate inline results for all code blocks in a cell"},"julia.persistentSession.enabled":{"type":"boolean","default":false,"scope":"machine-overridable","markdownDescription":"Experimental: Starts the interactive Julia session in a persistent `tmux` session. Note that `tmux` must be available in the shell defined below. If present the string `$[workspace]` will be replaced with the current file's workspace when the REPL is first opened."},"julia.packageServer":{"type":"string","default":"","scope":"machine-overridable","markdownDescription":"Julia package server. Sets the `JULIA_PKG_SERVER` environment variable *before* starting a Julia process. Leave this empty to use the systemwide default. Requires a restart of the Julia process."},"julia.focusPlotNavigator":{"type":"boolean","default":false,"description":"Whether to automatically show the plot navigator when plotting."},"julia.liveTestFile":{"type":"string","default":"test\/runtests.jl","description":"A workspace relative path to a Julia file that contains the tests that should be run for live testing.","scope":"window"},"julia.lint.useoffuncargs":{"type":"boolean","default":true,"description":"Check that all declared arguments are used within the function body."},"julia.lint.pirates":{"type":"boolean","default":true,"description":"Check for type piracy - the overloading of external functions with methods specified for external datatypes. 'External' here refers to imported code."},"julia.executablePath":{"type":"string","default":"","description":"Points to the julia executable.","scope":"machine-overridable"}},"$schema":"http:\/\/json-schema.org\/draft-07\/schema#","description":"Julia Language Support"}