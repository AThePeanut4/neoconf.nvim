{"properties": {"julia.runtimeCompletions": {"description": "Request runtime completions from the integrated REPL.", "scope": "application", "type": "boolean", "default": false}, "julia.persistentSession.alwaysCopy": {"description": "Always copy the command for connecting to an external REPL to the clipboard.", "scope": "application", "type": "boolean", "default": false}, "julia.liveTestFile": {"description": "A workspace relative path to a Julia file that contains the tests that should be run for live testing.", "scope": "window", "type": "string", "default": "test/runtests.jl"}, "julia.lint.call": {"description": "This compares  call signatures against all known methods for the called function. Calls with too many or too few arguments, or unknown keyword parameters are highlighted.", "type": "boolean", "default": true}, "julia.lint.useoffuncargs": {"description": "Check that all declared arguments are used within the function body.", "type": "boolean", "default": true}, "julia.lint.iter": {"description": "Check iterator syntax of loops. Will identify, for example, attempts to iterate over single values.", "type": "boolean", "default": true}, "julia.symbolCacheDownload": {"description": "Download symbol server cache files from GitHub.", "scope": "application", "type": ["boolean", "null"], "default": null}, "julia.executablePath": {"description": "Points to the julia executable.", "scope": "machine-overridable", "type": "string", "default": ""}, "julia.lint.lazy": {"description": "Check for deterministic lazy boolean operators.", "type": "boolean", "default": true}, "julia.enableCrashReporter": {"description": "Enable crash reports to be sent to the julia VS Code extension developers.", "scope": "window", "type": ["boolean", "null"], "default": null}, "julia.lint.pirates": {"description": "Check for type piracy - the overloading of external functions with methods specified for external datatypes. 'External' here refers to imported code.", "type": "boolean", "default": true}, "julia.useCustomSysimage": {"description": "Use an existing custom sysimage when starting the REPL", "scope": "application", "type": "boolean", "default": false}, "julia.completionmode": {"description": "Sets the mode for completions.", "enum": ["exportedonly", "import", "qualify"], "scope": "window", "type": "string", "enumDescriptions": ["Show completions for the current namespace.", "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will result in the automatic insertion of an explicit `using` statement.", "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will complete to a qualified variable name."], "default": "qualify"}, "julia.additionalArgs": {"description": "Additional Julia arguments.", "type": "array", "default": []}, "julia.persistentSession.shell": {"description": "Shell used to start the persistent session.", "scope": "machine", "type": "string", "default": "/bin/sh"}, "julia.lint.nothingcomp": {"description": "Check for use of `==` rather than `===` when comparing against `nothing`. ", "type": "boolean", "default": true}, "julia.persistentSession.enabled": {"scope": "machine-overridable", "type": "boolean", "markdownDescription": "Experimental: Starts the interactive Julia session in a persistent `tmux` session. Note that `tmux` must be available in the shell defined below. If present the string `$[workspace]` will be replaced with the current file's workspace when the REPL is first opened.", "default": false}, "julia.execution.resultType": {"description": "Specifies how to show inline execution results", "enum": ["REPL", "inline", "inline, errors in REPL", "both"], "type": "string", "enumDescriptions": ["Shows inline execution results in REPL", "Shows inline execution results as inline bubbles", "Shows inline execution results in REPL and inline bubbles"], "default": "both"}, "julia.workspace.showModules": {"description": "Show top-level modules in the workspace.", "scope": "application", "type": "boolean", "default": true}, "julia.plots.path": {"description": "The output directory to save plots to", "scope": "window", "type": "string"}, "julia.debuggerDefaultCompiled": {"description": "Functions or modules that are set to compiled mode when setting the defaults.", "scope": "window", "type": "array", "default": ["Base.", "-Base.!", "-Base.all", "-Base.all!", "-Base.any", "-Base.any!", "-Base.cd", "-Base.iterate", "-Base.collect", "-Base.collect_similar", "-Base._collect", "-Base.collect_to!", "-Base.collect_to_with_first!", "-Base.filter", "-Base.filter!", "-Base.foreach", "-Base.findall", "-Base.findfirst", "-Base.findlast", "-Base.findnext", "-Base.findprev", "-Base.Generator", "-Base.map", "-Base.map!", "-Base.maximum!", "-Base.minimum!", "-Base.mktemp", "-Base.mktempdir", "-Base.open", "-Base.prod!", "-Base.redirect_stderr", "-Base.redirect_stdin", "-Base.redirect_stdout", "-Base.reenable_sigint", "-Base.setindex!", "-Base.setprecision", "-Base.setrounding", "-Base.show", "-Base.sprint", "-Base.sum", "-Base.sum!", "-Base.task_local_storage", "-Base.timedwait", "-Base.withenv", "-Base.Broadcast", "Core", "Core.Compiler.", "Core.IR", "Core.Intrinsics", "DelimitedFiles", "Distributed", "LinearAlgebra.", "Serialization", "Statistics", "-Statistics.mean", "SparseArrays", "Mmap"]}, "julia.usePlotPane": {"description": "Display plots within VS Code. Might require a restart of the Julia process.", "type": "boolean", "default": true}, "julia.execution.codeInREPL": {"description": "Print executed code in REPL and append it to the REPL history.", "scope": "window", "type": "boolean", "default": false}, "julia.persistentSession.tmuxSessionName": {"scope": "machine-overridable", "type": "string", "markdownDescription": "Name of the `tmux` session.", "default": "julia_vscode"}, "julia.environmentPath": {"description": "Path to a julia environment. VS Code needs to be reloaded for changes to take effect.", "scope": "window", "type": ["string", "null"], "default": null}, "julia.packageServer": {"scope": "machine-overridable", "type": "string", "markdownDescription": "Julia package server. Sets the `JULIA_PKG_SERVER` environment variable *before* starting a Julia process. Leave this empty to use the systemwide default. Requires a restart of the Julia process.", "default": ""}, "julia.useRevise": {"description": "Load Revise.jl on startup of the REPL.", "type": "boolean", "default": true}, "julia.NumThreads": {"scope": "machine-overridable", "type": ["integer", "string", "null"], "markdownDescription": "Number of threads to use for Julia processes. A value of `auto` works on Julia versions that allow for `--threads=auto`.", "default": null}, "julia.deleteJuliaCovFiles": {"description": "Delete Julia .cov files when running tests with coverage, leaving only a .lcov file behind.", "scope": "window", "type": "boolean", "default": true}, "julia.cellDelimiters": {"description": "Cell delimiter regular expressions for Julia files.", "type": "array", "default": ["^##(?!#)", "^#(\\s?)%%", "^#-"]}, "julia.showRuntimeDiagnostics": {"type": "boolean", "markdownDescription": "Enable display of runtime diagnostics. These diagnostics are provided by packages that overload a `show` method for the `application/vnd.julia-vscode.diagnostics` MIME type.", "default": true}, "julia.symbolserverUpstream": {"description": "Symbol server cache download URL.", "scope": "application", "type": "string", "default": "https://www.julia-vscode.org/symbolcache"}, "julia.trace.server": {"description": "Traces the communication between VS Code and the language server.", "enum": ["off", "messages", "verbose"], "scope": "window", "type": "string", "default": "off"}, "julia.lint.modname": {"description": "Check submodule names do not shadow their parent's name.", "type": "boolean", "default": true}, "julia.enableTelemetry": {"description": "Enable usage data and errors to be sent to the julia VS Code extension developers.", "scope": "window", "type": ["boolean", "null"], "default": null}, "julia.lint.run": {"description": "Run the linter on active files.", "type": "boolean", "default": true}, "julia.execution.saveOnEval": {"scope": "window", "type": "boolean", "markdownDescription": "Save file before execution", "default": false}, "julia.lint.datadecl": {"description": "Check variables used in type declarations are datatypes.", "type": "boolean", "default": true}, "julia.lint.constif": {"description": "Check for constant conditionals in if statements that result in branches never being reached..", "type": "boolean", "default": true}, "julia.persistentSession.warnOnKill": {"description": "Warn when stopping a persistent session.", "scope": "application", "type": "boolean", "default": true}, "julia.focusPlotNavigator": {"description": "Whether to automatically show the plot navigator when plotting.", "type": "boolean", "default": false}, "julia.useProgressFrontend": {"type": "boolean", "markdownDescription": "Display [progress bars](https://github.com/JunoLab/ProgressLogging.jl) within VS Code.", "default": true}, "julia.lint.disabledDirs": {"type": "array", "markdownDescription": "Specifies sub-directories in [a package directory](https://docs.julialang.org/en/v1/manual/code-loading/#Package-directories-1) where only basic linting is. This drastically lowers the chance for false positives.", "default": ["docs", "test"]}, "julia.editor": {"type": "string", "markdownDescription": "Command to open files from the REPL (via setting the `JULIA_EDITOR` environment variable).", "default": "code"}, "julia.execution.inlineResultsForCellEvaluation": {"scope": "window", "type": "boolean", "markdownDescription": "Show separate inline results for all code blocks in a cell", "default": false}, "julia.lint.missingrefs": {"description": "Highlight unknown symbols. The `symbols` option will not mark unknown fields.", "enum": ["none", "symbols", "all"], "type": "string", "default": "none"}, "julia.lint.typeparam": {"description": "Check parameters declared in `where` statements or datatype declarations are used.", "type": "boolean", "default": true}, "julia.persistentSession.shellExecutionArgument": {"scope": "machine", "type": "string", "markdownDescription": "Argument to execute code in the configured shell, e.g. `-c` for sh-likes or `/c` for `cmd`.", "default": "-c"}}, "description": "Julia Language Support", "$schema": "http://json-schema.org/draft-07/schema#"}