{"properties": {"rust-analyzer.hover.actions.enable": {"type": "boolean", "markdownDescription": "Whether to show HoverActions in Rust files.", "default": true}, "rust-analyzer.diagnostics.remapPrefix": {"type": "object", "markdownDescription": "Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.", "default": {}}, "rust-analyzer.cachePriming.numThreads": {"minimum": 0, "maximum": 255, "type": "number", "markdownDescription": "How many worker threads to handle priming caches. The default `0` means to pick automatically.", "default": 0}, "rust-analyzer.cargo.noDefaultFeatures": {"type": "boolean", "markdownDescription": "Whether to pass `--no-default-features` to cargo.", "default": false}, "rust-analyzer.inlayHints.closingBraceHints.enable": {"type": "boolean", "markdownDescription": "Whether to show inlay hints after a closing `}` to indicate what item it belongs to.", "default": true}, "rust-analyzer.imports.merge.glob": {"type": "boolean", "markdownDescription": "Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.", "default": true}, "rust-analyzer.trace.extension": {"description": "Enable logging of VS Code extensions itself.", "type": "boolean", "default": false}, "rust-analyzer.hover.documentation.enable": {"type": "boolean", "markdownDescription": "Whether to show documentation on hover.", "default": true}, "rust-analyzer.workspace.symbol.search.scope": {"enum": ["workspace", "workspace_and_dependencies"], "type": "string", "markdownDescription": "Workspace symbol search scope.", "enumDescriptions": ["Search in current workspace only.", "Search in current workspace and dependencies."], "default": "workspace"}, "rust-analyzer.completion.autoself.enable": {"type": "boolean", "markdownDescription": "Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.", "default": true}, "rust-analyzer.files.excludeDirs": {"type": "array", "markdownDescription": "These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.", "default": [], "items": {"type": "string"}}, "rust-analyzer.procMacro.ignored": {"type": "object", "markdownDescription": "These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.", "default": {}}, "rust-analyzer.cargoRunner": {"description": "Custom cargo runner extension ID.", "type": ["null", "string"], "default": null}, "rust-analyzer.completion.callable.snippets": {"enum": ["fill_arguments", "add_parentheses", "none"], "type": "string", "markdownDescription": "Whether to add parenthesis and argument snippets when completing function.", "enumDescriptions": ["Add call parentheses and pre-fill arguments.", "Add call parentheses.", "Do no snippet completions for callables."], "default": "fill_arguments"}, "rust-analyzer.hover.actions.run.enable": {"type": "boolean", "markdownDescription": "Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.", "default": true}, "rust-analyzer.hover.actions.implementations.enable": {"type": "boolean", "markdownDescription": "Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.", "default": true}, "rust-analyzer.diagnostics.experimental.enable": {"type": "boolean", "markdownDescription": "Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.", "default": false}, "rust-analyzer.cargo.buildScripts.useRustcWrapper": {"type": "boolean", "markdownDescription": "Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things.", "default": true}, "rust-analyzer.lens.implementations.enable": {"type": "boolean", "markdownDescription": "Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.", "default": true}, "rust-analyzer.hover.documentation.keywords.enable": {"type": "boolean", "markdownDescription": "Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set.", "default": true}, "rust-analyzer.trace.server": {"description": "Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).", "enum": ["off", "messages", "verbose"], "scope": "window", "type": "string", "enumDescriptions": ["No traces", "Error only", "Full log"], "default": "off"}, "rust-analyzer.inlayHints.maxLength": {"minimum": 0, "type": ["null", "integer"], "markdownDescription": "Maximum length for inlay hints. Set to null to have an unlimited length.", "default": 25}, "rust-analyzer.server.extraEnv": {"additionalProperties": {"type": ["string", "number"]}, "type": ["null", "object"], "markdownDescription": "Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging.", "default": null}, "rust-analyzer.restartServerOnConfigChange": {"type": "boolean", "markdownDescription": "Whether to restart the server automatically when certain settings that require a restart are changed.", "default": false}, "rust-analyzer.debug.engine": {"description": "Preferred debug engine.", "enum": ["auto", "vadimcn.vscode-lldb", "ms-vscode.cpptools"], "type": "string", "default": "auto", "markdownEnumDescriptions": ["First try to use [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb), if it's not installed try to use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools).", "Use [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)", "Use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)"]}, "rust-analyzer.hover.actions.gotoTypeDef.enable": {"type": "boolean", "markdownDescription": "Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.", "default": true}, "rust-analyzer.inlayHints.typeHints.enable": {"type": "boolean", "markdownDescription": "Whether to show inlay type hints for variables.", "default": true}, "rust-analyzer.inlayHints.reborrowHints.enable": {"enum": ["always", "never", "mutable"], "type": "string", "markdownDescription": "Whether to show inlay type hints for compiler inserted reborrows.", "enumDescriptions": ["Always show reborrow hints.", "Never show reborrow hints.", "Only show mutable reborrow hints."], "default": "never"}, "rust-analyzer.runnables.command": {"type": ["null", "string"], "markdownDescription": "Command to be executed instead of 'cargo' for runnables.", "default": null}, "rust-analyzer.inlayHints.chainingHints.enable": {"type": "boolean", "markdownDescription": "Whether to show inlay type hints for method chains.", "default": true}, "rust-analyzer.checkOnSave.overrideCommand": {"type": ["null", "array"], "markdownDescription": "Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefor include `--message-format=json` or a similar option.\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects, this command is invoked for\neach of them, with the working directory being the project root\n(i.e., the folder containing the `Cargo.toml`).\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n.", "default": null, "items": {"type": "string"}}, "rust-analyzer.lens.references.trait.enable": {"type": "boolean", "markdownDescription": "Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set.", "default": false}, "rust-analyzer.cachePriming.enable": {"type": "boolean", "markdownDescription": "Warm up caches on project load.", "default": true}, "rust-analyzer.lens.debug.enable": {"type": "boolean", "markdownDescription": "Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.", "default": true}, "rust-analyzer.completion.postfix.enable": {"type": "boolean", "markdownDescription": "Whether to show postfix snippets like `dbg`, `if`, `not`, etc.", "default": true}, "rust-analyzer.typing.autoClosingAngleBrackets.enable": {"type": "boolean", "markdownDescription": "Whether to insert closing angle brackets when typing an opening angle bracket of a generic argument list.", "default": false}, "rust-analyzer.procMacro.server": {"type": ["null", "string"], "markdownDescription": "Internal config, path to proc-macro server executable (typically,\nthis is rust-analyzer itself, but we override this in tests).", "default": null}, "rust-analyzer.typing.continueCommentsOnNewline": {"type": "boolean", "markdownDescription": "Whether to prefix newlines after comments with the corresponding comment prefix.", "default": true}, "rust-analyzer.inlayHints.parameterHints.enable": {"type": "boolean", "markdownDescription": "Whether to show function parameter name inlay hints at the call\nsite.", "default": true}, "rust-analyzer.lens.references.adt.enable": {"type": "boolean", "markdownDescription": "Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set.", "default": false}, "rust-analyzer.lens.references.enumVariant.enable": {"type": "boolean", "markdownDescription": "Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set.", "default": false}, "rust-analyzer.inlayHints.bindingModeHints.enable": {"type": "boolean", "markdownDescription": "Whether to show inlay type hints for binding modes.", "default": false}, "rust-analyzer.imports.granularity.enforce": {"type": "boolean", "markdownDescription": "Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.", "default": false}, "rust-analyzer.lens.run.enable": {"type": "boolean", "markdownDescription": "Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.", "default": true}, "rust-analyzer.checkOnSave.features": {"anyOf": [{"enum": ["all"], "type": "string", "enumDescriptions": ["Pass `--all-features` to cargo"]}, {"type": "array", "items": {"type": "string"}}, {"type": "null"}], "markdownDescription": "List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo.", "default": null}, "rust-analyzer.rustfmt.overrideCommand": {"type": ["null", "array"], "markdownDescription": "Advanced option, fully override the command rust-analyzer uses for\nformatting.", "default": null, "items": {"type": "string"}}, "rust-analyzer.cargo.noSysroot": {"type": "boolean", "markdownDescription": "Internal config for debugging, disables loading of sysroot crates.", "default": false}, "rust-analyzer.cargo.features": {"anyOf": [{"enum": ["all"], "type": "string", "enumDescriptions": ["Pass `--all-features` to cargo"]}, {"type": "array", "items": {"type": "string"}}], "markdownDescription": "List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo.", "default": []}, "rust-analyzer.highlightRelated.references.enable": {"type": "boolean", "markdownDescription": "Enables highlighting of related references while the cursor is on any identifier.", "default": true}, "rust-analyzer.workspace.symbol.search.kind": {"enum": ["only_types", "all_symbols"], "type": "string", "markdownDescription": "Workspace symbol search kind.", "enumDescriptions": ["Search for types only.", "Search for all symbols kinds."], "default": "only_types"}, "rust-analyzer.checkOnSave.noDefaultFeatures": {"type": ["null", "boolean"], "markdownDescription": "Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`.", "default": null}, "rust-analyzer.imports.group.enable": {"type": "boolean", "markdownDescription": "Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.", "default": true}, "rust-analyzer.highlightRelated.exitPoints.enable": {"type": "boolean", "markdownDescription": "Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).", "default": true}, "rust-analyzer.lens.forceCustomCommands": {"type": "boolean", "markdownDescription": "Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability.", "default": true}, "rust-analyzer.highlightRelated.breakPoints.enable": {"type": "boolean", "markdownDescription": "Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.", "default": true}, "rust-analyzer.diagnostics.warningsAsInfo": {"type": "array", "markdownDescription": "List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.", "default": [], "items": {"type": "string"}}, "rust-analyzer.cargo.buildScripts.enable": {"type": "boolean", "markdownDescription": "Run build scripts (`build.rs`) for more precise code analysis.", "default": true}, "rust-analyzer.checkOnSave.command": {"type": "string", "markdownDescription": "Cargo command to use for `cargo check`.", "default": "check"}, "rust-analyzer.imports.granularity.group": {"enum": ["preserve", "crate", "module", "item"], "type": "string", "markdownDescription": "How imports should be grouped into use statements.", "enumDescriptions": ["Do not change the granularity of any imports and preserve the original structure written by the developer.", "Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.", "Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.", "Flatten imports so that each has its own use statement."], "default": "crate"}, "rust-analyzer.inlayHints.closureReturnTypeHints.enable": {"enum": ["always", "never", "with_block"], "type": "string", "markdownDescription": "Whether to show inlay type hints for return types of closures.", "enumDescriptions": ["Always show type hints for return types of closures.", "Never show type hints for return types of closures.", "Only show type hints for return types of closures with blocks."], "default": "never"}, "rust-analyzer.imports.prefix": {"enum": ["plain", "self", "crate"], "type": "string", "markdownDescription": "The path structure for newly inserted paths to use.", "enumDescriptions": ["Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.", "Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.", "Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."], "default": "plain"}, "rust-analyzer.checkOnSave.extraArgs": {"type": "array", "markdownDescription": "Extra arguments for `cargo check`.", "default": [], "items": {"type": "string"}}, "rust-analyzer.lens.references.method.enable": {"type": "boolean", "markdownDescription": "Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.", "default": false}, "rust-analyzer.semanticHighlighting.doc.comment.inject.enable": {"type": "boolean", "markdownDescription": "Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links.", "default": true}, "rust-analyzer.highlightRelated.yieldPoints.enable": {"type": "boolean", "markdownDescription": "Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.", "default": true}, "rust-analyzer.hover.actions.debug.enable": {"type": "boolean", "markdownDescription": "Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.", "default": true}, "rust-analyzer.semanticHighlighting.operator.specialization.enable": {"type": "boolean", "markdownDescription": "Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type.", "default": false}, "rust-analyzer.runnableEnv": {"anyOf": [{"type": "null"}, {"type": "array", "items": {"properties": {"env": {"description": "Variables in form of { \"key\": \"value\"}", "type": "object"}, "mask": {"description": "Runnable name mask", "type": "string"}}, "type": "object"}}, {"description": "Variables in form of { \"key\": \"value\"}", "type": "object"}], "markdownDescription": "Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command.", "default": null}, "rust-analyzer.completion.privateEditable.enable": {"type": "boolean", "markdownDescription": "Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.", "default": false}, "rust-analyzer.debug.engineSettings": {"type": "object", "markdownDescription": "Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`", "default": {}}, "rust-analyzer.checkOnSave.allTargets": {"type": "boolean", "markdownDescription": "Check all targets and tests (`--all-targets`).", "default": true}, "rust-analyzer.rustc.source": {"type": ["null", "string"], "markdownDescription": "Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.", "default": null}, "rust-analyzer.assist.expressionFillDefault": {"enum": ["todo", "default"], "type": "string", "markdownDescription": "Placeholder expression to use for missing expressions in assists.", "enumDescriptions": ["Fill missing expressions with the `todo` macro", "Fill missing expressions with reasonable defaults, `new` or `default` constructors."], "default": "todo"}, "rust-analyzer.debug.sourceFileMap": {"description": "Optional source file mappings passed to the debug engine.", "const": "auto", "type": ["object", "string"], "default": {"/rustc/<id>": "${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust"}}, "rust-analyzer.joinLines.removeTrailingComma": {"type": "boolean", "markdownDescription": "Join lines removes trailing commas.", "default": true}, "rust-analyzer.semanticHighlighting.strings.enable": {"type": "boolean", "markdownDescription": "Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.", "default": true}, "rust-analyzer.inlayHints.closingBraceHints.minLines": {"minimum": 0, "type": "integer", "markdownDescription": "Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them).", "default": 25}, "rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang": {"type": "boolean", "markdownDescription": "When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls.", "default": false}, "rust-analyzer.runnables.extraArgs": {"type": "array", "markdownDescription": "Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.", "default": [], "items": {"type": "string"}}, "rust-analyzer.inlayHints.renderColons": {"type": "boolean", "markdownDescription": "Whether to render leading colons for type hints, and trailing colons for parameter hints.", "default": true}, "rust-analyzer.rustfmt.extraArgs": {"type": "array", "markdownDescription": "Additional arguments to `rustfmt`.", "default": [], "items": {"type": "string"}}, "rust-analyzer.hover.links.enable": {"type": "boolean", "markdownDescription": "Use markdown syntax for links in hover.", "default": true}, "rust-analyzer.diagnostics.enable": {"type": "boolean", "markdownDescription": "Whether to show native rust-analyzer diagnostics.", "default": true}, "rust-analyzer.procMacro.attributes.enable": {"type": "boolean", "markdownDescription": "Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.", "default": true}, "rust-analyzer.linkedProjects": {"type": "array", "markdownDescription": "Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format.", "default": [], "items": {"type": ["string", "object"]}}, "$generated-start": {}, "rust-analyzer.rustfmt.rangeFormatting.enable": {"type": "boolean", "markdownDescription": "Enables the use of rustfmt's unstable range formatting command for the\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.", "default": false}, "rust-analyzer.semanticHighlighting.operator.enable": {"type": "boolean", "markdownDescription": "Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers.", "default": true}, "rust-analyzer.signatureInfo.detail": {"enum": ["full", "parameters"], "type": "string", "markdownDescription": "Show full signature of the callable. Only shows parameters if disabled.", "enumDescriptions": ["Show the entire signature.", "Show only the parameters."], "default": "full"}, "rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": {"type": "boolean", "markdownDescription": "Whether to prefer using parameter names as the name for elided lifetime hints if possible.", "default": false}, "rust-analyzer.lru.capacity": {"minimum": 0, "type": ["null", "integer"], "markdownDescription": "Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.", "default": null}, "rust-analyzer.workspace.symbol.search.limit": {"minimum": 0, "type": "integer", "markdownDescription": "Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.", "default": 128}, "rust-analyzer.inlayHints.typeHints.hideNamedConstructor": {"type": "boolean", "markdownDescription": "Whether to hide inlay type hints for constructors.", "default": false}, "rust-analyzer.diagnostics.warningsAsHint": {"type": "array", "markdownDescription": "List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.", "default": [], "items": {"type": "string"}}, "rust-analyzer.server.path": {"scope": "machine-overridable", "type": ["null", "string"], "markdownDescription": "Path to rust-analyzer executable (points to bundled binary by default).", "default": null}, "rust-analyzer.lens.enable": {"type": "boolean", "markdownDescription": "Whether to show CodeLens in Rust files.", "default": true}, "rust-analyzer.procMacro.enable": {"type": "boolean", "markdownDescription": "Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.", "default": true}, "rust-analyzer.notifications.cargoTomlNotFound": {"type": "boolean", "markdownDescription": "Whether to show `can't find Cargo.toml` error message.", "default": true}, "rust-analyzer.cargo.autoreload": {"type": "boolean", "markdownDescription": "Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo/config.toml` changes.", "default": true}, "rust-analyzer.hover.actions.references.enable": {"type": "boolean", "markdownDescription": "Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.", "default": false}, "rust-analyzer.cargo.unsetTest": {"type": "array", "markdownDescription": "Unsets `#[cfg(test)]` for the specified crates.", "default": ["core"], "items": {"type": "string"}}, "rust-analyzer.debug.openDebugPane": {"type": "boolean", "markdownDescription": "Whether to open up the `Debug Panel` on debugging start.", "default": false}, "rust-analyzer.checkOnSave.target": {"type": ["null", "string"], "markdownDescription": "Check for a specific target. Defaults to\n`#rust-analyzer.cargo.target#`.", "default": null}, "rust-analyzer.inlayHints.typeHints.hideClosureInitialization": {"type": "boolean", "markdownDescription": "Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.", "default": false}, "rust-analyzer.joinLines.unwrapTrivialBlock": {"type": "boolean", "markdownDescription": "Join lines unwraps trivial blocks.", "default": true}, "rust-analyzer.semanticHighlighting.punctuation.enable": {"type": "boolean", "markdownDescription": "Use semantic tokens for punctuations.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role.", "default": false}, "rust-analyzer.joinLines.joinElseIf": {"type": "boolean", "markdownDescription": "Join lines inserts else between consecutive ifs.", "default": true}, "rust-analyzer.checkOnSave.enable": {"type": "boolean", "markdownDescription": "Run specified `cargo check` command for diagnostics on save.", "default": true}, "rust-analyzer.signatureInfo.documentation.enable": {"type": "boolean", "markdownDescription": "Show documentation.", "default": true}, "rust-analyzer.completion.autoimport.enable": {"type": "boolean", "markdownDescription": "Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.", "default": true}, "rust-analyzer.diagnostics.disabled": {"type": "array", "markdownDescription": "List of rust-analyzer diagnostics to disable.", "uniqueItems": true, "items": {"type": "string"}, "default": []}, "rust-analyzer.semanticHighlighting.punctuation.specialization.enable": {"type": "boolean", "markdownDescription": "Use specialized semantic tokens for punctuations.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type.", "default": false}, "$generated-end": {}, "rust-analyzer.joinLines.joinAssignments": {"type": "boolean", "markdownDescription": "Join lines merges consecutive declaration and initialization of an assignment.", "default": true}, "rust-analyzer.files.watcher": {"enum": ["client", "server"], "type": "string", "markdownDescription": "Controls file watching implementation.", "enumDescriptions": ["Use the client (editor) to watch files for changes", "Use server-side file watching"], "default": "client"}, "rust-analyzer.cargo.target": {"type": ["null", "string"], "markdownDescription": "Compilation target override (target triple).", "default": null}, "rust-analyzer.cargo.buildScripts.overrideCommand": {"type": ["null", "array"], "markdownDescription": "Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets\n```\n.", "default": null, "items": {"type": "string"}}, "rust-analyzer.completion.snippets.custom": {"type": "object", "markdownDescription": "Custom completion snippets.", "default": {"Box::pin": {"requires": "std::boxed::Box", "scope": "expr", "description": "Put the expression into a pinned `Box`", "postfix": "pinbox", "body": "Box::pin(${receiver})"}, "Some": {"description": "Wrap the expression in an `Option::Some`", "scope": "expr", "postfix": "some", "body": "Some(${receiver})"}, "Ok": {"description": "Wrap the expression in a `Result::Ok`", "scope": "expr", "postfix": "ok", "body": "Ok(${receiver})"}, "Arc::new": {"requires": "std::sync::Arc", "scope": "expr", "description": "Put the expression into an `Arc`", "postfix": "arc", "body": "Arc::new(${receiver})"}, "Err": {"description": "Wrap the expression in a `Result::Err`", "scope": "expr", "postfix": "err", "body": "Err(${receiver})"}, "Rc::new": {"requires": "std::rc::Rc", "scope": "expr", "description": "Put the expression into an `Rc`", "postfix": "rc", "body": "Rc::new(${receiver})"}}}, "rust-analyzer.inlayHints.lifetimeElisionHints.enable": {"enum": ["always", "never", "skip_trivial"], "type": "string", "markdownDescription": "Whether to show inlay type hints for elided lifetimes in function signatures.", "enumDescriptions": ["Always show lifetime elision hints.", "Never show lifetime elision hints.", "Only show lifetime elision hints if a return type is involved."], "default": "never"}}, "description": "Rust language support for Visual Studio Code", "$schema": "http://json-schema.org/draft-07/schema#"}