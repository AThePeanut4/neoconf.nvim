{"properties":{"rust-analyzer.inlayHints.reborrowHints.enable":{"enum":["always","never","mutable"],"type":"string","default":"never","enumDescriptions":["Always show reborrow hints.","Never show reborrow hints.","Only show mutable reborrow hints."],"markdownDescription":"Whether to show inlay type hints for compiler inserted reborrows."},"rust-analyzer.inlayHints.renderColons":{"type":"boolean","default":true,"markdownDescription":"Whether to render leading colons for type hints, and trailing colons for parameter hints."},"rust-analyzer.inlayHints.typeHints.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show inlay type hints for variables."},"rust-analyzer.inlayHints.typeHints.hideClosureInitialization":{"type":"boolean","default":false,"markdownDescription":"Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`."},"rust-analyzer.inlayHints.typeHints.hideNamedConstructor":{"type":"boolean","default":false,"markdownDescription":"Whether to hide inlay type hints for constructors."},"rust-analyzer.cargo.buildScripts.enable":{"type":"boolean","default":true,"markdownDescription":"Run build scripts (`build.rs`) for more precise code analysis."},"rust-analyzer.joinLines.joinAssignments":{"type":"boolean","default":true,"markdownDescription":"Join lines merges consecutive declaration and initialization of an assignment."},"rust-analyzer.workspace.symbol.search.scope":{"enum":["workspace","workspace_and_dependencies"],"type":"string","default":"workspace","enumDescriptions":["Search in current workspace only.","Search in current workspace and dependencies."],"markdownDescription":"Workspace symbol search scope."},"rust-analyzer.joinLines.joinElseIf":{"type":"boolean","default":true,"markdownDescription":"Join lines inserts else between consecutive ifs."},"rust-analyzer.workspace.symbol.search.limit":{"type":"integer","default":128,"minimum":0,"markdownDescription":"Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit."},"rust-analyzer.joinLines.removeTrailingComma":{"type":"boolean","default":true,"markdownDescription":"Join lines removes trailing commas."},"rust-analyzer.workspace.symbol.search.kind":{"enum":["only_types","all_symbols"],"type":"string","default":"only_types","enumDescriptions":["Search for types only.","Search for all symbols kinds."],"markdownDescription":"Workspace symbol search kind."},"rust-analyzer.joinLines.unwrapTrivialBlock":{"type":"boolean","default":true,"markdownDescription":"Join lines unwraps trivial blocks."},"rust-analyzer.typing.autoClosingAngleBrackets.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to insert closing angle brackets when typing an opening angle bracket of a generic argument list."},"rust-analyzer.lens.debug.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.diagnostics.disabled":{"uniqueItems":true,"items":{"type":"string"},"type":"array","default":[],"markdownDescription":"List of rust-analyzer diagnostics to disable."},"rust-analyzer.lens.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show CodeLens in Rust files."},"rust-analyzer.diagnostics.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show native rust-analyzer diagnostics."},"rust-analyzer.lens.forceCustomCommands":{"type":"boolean","default":true,"markdownDescription":"Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability."},"rust-analyzer.diagnostics.experimental.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual."},"rust-analyzer.cargoRunner":{"type":["null","string"],"default":null,"description":"Custom cargo runner extension ID."},"rust-analyzer.diagnostics.remapPrefix":{"type":"object","default":{},"markdownDescription":"Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`."},"rust-analyzer.runnableEnv":{"anyOf":[{"type":"null"},{"type":"array","items":{"type":"object","properties":{"mask":{"type":"string","description":"Runnable name mask"},"env":{"type":"object","description":"Variables in form of { \"key\": \"value\"}"}}}},{"type":"object","description":"Variables in form of { \"key\": \"value\"}"}],"default":null,"markdownDescription":"Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command."},"rust-analyzer.diagnostics.warningsAsHint":{"type":"array","default":[],"items":{"type":"string"},"markdownDescription":"List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`."},"rust-analyzer.lens.references.enumVariant.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set."},"rust-analyzer.diagnostics.warningsAsInfo":{"type":"array","default":[],"items":{"type":"string"},"markdownDescription":"List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`."},"rust-analyzer.server.path":{"type":["null","string"],"default":null,"scope":"machine-overridable","markdownDescription":"Path to rust-analyzer executable (points to bundled binary by default)."},"rust-analyzer.files.excludeDirs":{"type":"array","default":[],"items":{"type":"string"},"markdownDescription":"These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`."},"rust-analyzer.server.extraEnv":{"type":["null","object"],"default":null,"additionalProperties":{"type":["string","number"]},"markdownDescription":"Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging."},"rust-analyzer.files.watcher":{"enum":["client","server"],"type":"string","default":"client","enumDescriptions":["Use the client (editor) to watch files for changes","Use server-side file watching"],"markdownDescription":"Controls file watching implementation."},"rust-analyzer.trace.server":{"enum":["off","messages","verbose"],"description":"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).","type":"string","default":"off","enumDescriptions":["No traces","Error only","Full log"],"scope":"window"},"rust-analyzer.lens.references.trait.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set."},"rust-analyzer.linkedProjects":{"type":"array","default":[],"items":{"type":["string","object"]},"markdownDescription":"Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format."},"rust-analyzer.highlightRelated.breakPoints.enable":{"type":"boolean","default":true,"markdownDescription":"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords."},"rust-analyzer.lru.capacity":{"type":["null","integer"],"default":null,"minimum":0,"markdownDescription":"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128."},"rust-analyzer.highlightRelated.exitPoints.enable":{"type":"boolean","default":true,"markdownDescription":"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`)."},"rust-analyzer.notifications.cargoTomlNotFound":{"type":"boolean","default":true,"markdownDescription":"Whether to show `can't find Cargo.toml` error message."},"rust-analyzer.highlightRelated.references.enable":{"type":"boolean","default":true,"markdownDescription":"Enables highlighting of related references while the cursor is on any identifier."},"rust-analyzer.procMacro.attributes.enable":{"type":"boolean","default":true,"markdownDescription":"Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set."},"rust-analyzer.highlightRelated.yieldPoints.enable":{"type":"boolean","default":true,"markdownDescription":"Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords."},"rust-analyzer.procMacro.enable":{"type":"boolean","default":true,"markdownDescription":"Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`."},"rust-analyzer.hover.actions.debug.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.procMacro.ignored":{"type":"object","default":{},"markdownDescription":"These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values."},"rust-analyzer.hover.actions.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show HoverActions in Rust files."},"rust-analyzer.debug.sourceFileMap":{"type":["object","string"],"const":"auto","description":"Optional source file mappings passed to the debug engine.","default":{"\/rustc\/<id>":"${env:USERPROFILE}\/.rustup\/toolchains\/<toolchain-id>\/lib\/rustlib\/src\/rust"}},"rust-analyzer.hover.actions.gotoTypeDef.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.runnables.command":{"type":["null","string"],"default":null,"markdownDescription":"Command to be executed instead of 'cargo' for runnables."},"rust-analyzer.procMacro.server":{"type":["null","string"],"default":null,"markdownDescription":"Internal config, path to proc-macro server executable (typically,\nthis is rust-analyzer itself, but we override this in tests)."},"rust-analyzer.debug.openDebugPane":{"type":"boolean","default":false,"markdownDescription":"Whether to open up the `Debug Panel` on debugging start."},"rust-analyzer.runnables.extraArgs":{"type":"array","default":[],"items":{"type":"string"},"markdownDescription":"Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`."},"rust-analyzer.debug.engineSettings":{"type":"object","default":{},"markdownDescription":"Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`"},"rust-analyzer.rustc.source":{"type":["null","string"],"default":null,"markdownDescription":"Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted."},"rust-analyzer.restartServerOnConfigChange":{"type":"boolean","default":false,"markdownDescription":"Whether to restart the server automatically when certain settings that require a restart are changed."},"rust-analyzer.rustfmt.extraArgs":{"type":"array","default":[],"items":{"type":"string"},"markdownDescription":"Additional arguments to `rustfmt`."},"rust-analyzer.typing.continueCommentsOnNewline":{"type":"boolean","default":true,"markdownDescription":"Whether to prefix newlines after comments with the corresponding comment prefix."},"rust-analyzer.rustfmt.overrideCommand":{"type":["null","array"],"default":null,"items":{"type":"string"},"markdownDescription":"Advanced option, fully override the command rust-analyzer uses for\nformatting."},"$generated-start":{},"rust-analyzer.assist.expressionFillDefault":{"enum":["todo","default"],"type":"string","default":"todo","enumDescriptions":["Fill missing expressions with the `todo` macro","Fill missing expressions with reasonable defaults, `new` or `default` constructors."],"markdownDescription":"Placeholder expression to use for missing expressions in assists."},"rust-analyzer.semanticHighlighting.doc.comment.inject.enable":{"type":"boolean","default":true,"markdownDescription":"Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links."},"rust-analyzer.rustfmt.rangeFormatting.enable":{"type":"boolean","default":false,"markdownDescription":"Enables the use of rustfmt's unstable range formatting command for the\n`textDocument\/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build."},"rust-analyzer.semanticHighlighting.operator.enable":{"type":"boolean","default":true,"markdownDescription":"Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers."},"rust-analyzer.cachePriming.enable":{"type":"boolean","default":true,"markdownDescription":"Warm up caches on project load."},"rust-analyzer.semanticHighlighting.operator.specialization.enable":{"type":"boolean","default":false,"markdownDescription":"Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type."},"rust-analyzer.cachePriming.numThreads":{"minimum":0,"maximum":255,"type":"number","default":0,"markdownDescription":"How many worker threads to handle priming caches. The default `0` means to pick automatically."},"rust-analyzer.semanticHighlighting.punctuation.enable":{"type":"boolean","default":false,"markdownDescription":"Use semantic tokens for punctuations.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role."},"rust-analyzer.hover.actions.implementations.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang":{"type":"boolean","default":false,"markdownDescription":"When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls."},"rust-analyzer.cargo.autoreload":{"type":"boolean","default":true,"markdownDescription":"Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo\/config.toml` changes."},"rust-analyzer.semanticHighlighting.punctuation.specialization.enable":{"type":"boolean","default":false,"markdownDescription":"Use specialized semantic tokens for punctuations.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type."},"rust-analyzer.hover.actions.run.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.semanticHighlighting.strings.enable":{"type":"boolean","default":true,"markdownDescription":"Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents."},"rust-analyzer.hover.documentation.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show documentation on hover."},"rust-analyzer.signatureInfo.detail":{"enum":["full","parameters"],"type":"string","default":"full","enumDescriptions":["Show the entire signature.","Show only the parameters."],"markdownDescription":"Show full signature of the callable. Only shows parameters if disabled."},"rust-analyzer.hover.documentation.keywords.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set."},"rust-analyzer.lens.run.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.hover.links.enable":{"type":"boolean","default":true,"markdownDescription":"Use markdown syntax for links in hover."},"rust-analyzer.signatureInfo.documentation.enable":{"type":"boolean","default":true,"markdownDescription":"Show documentation."},"rust-analyzer.imports.granularity.enforce":{"type":"boolean","default":false,"markdownDescription":"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file."},"rust-analyzer.cargo.noDefaultFeatures":{"type":"boolean","default":false,"markdownDescription":"Whether to pass `--no-default-features` to cargo."},"rust-analyzer.imports.granularity.group":{"enum":["preserve","crate","module","item"],"type":"string","default":"crate","enumDescriptions":["Do not change the granularity of any imports and preserve the original structure written by the developer.","Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.","Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.","Flatten imports so that each has its own use statement."],"markdownDescription":"How imports should be grouped into use statements."},"rust-analyzer.cargo.noSysroot":{"type":"boolean","default":false,"markdownDescription":"Internal config for debugging, disables loading of sysroot crates."},"rust-analyzer.lens.references.method.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.cargo.target":{"type":["null","string"],"default":null,"markdownDescription":"Compilation target override (target triple)."},"rust-analyzer.lens.references.adt.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set."},"rust-analyzer.cargo.unsetTest":{"type":"array","default":["core"],"items":{"type":"string"},"markdownDescription":"Unsets `#[cfg(test)]` for the specified crates."},"rust-analyzer.imports.group.enable":{"type":"boolean","default":true,"markdownDescription":"Group inserted imports by the [following order](https:\/\/rust-analyzer.github.io\/manual.html#auto-import). Groups are separated by newlines."},"rust-analyzer.checkOnSave.allTargets":{"type":"boolean","default":true,"markdownDescription":"Check all targets and tests (`--all-targets`)."},"rust-analyzer.imports.merge.glob":{"type":"boolean","default":true,"markdownDescription":"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`."},"rust-analyzer.checkOnSave.command":{"type":"string","default":"check","markdownDescription":"Cargo command to use for `cargo check`."},"rust-analyzer.imports.prefix":{"enum":["plain","self","crate"],"type":"string","default":"plain","enumDescriptions":["Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.","Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.","Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."],"markdownDescription":"The path structure for newly inserted paths to use."},"rust-analyzer.checkOnSave.enable":{"type":"boolean","default":true,"markdownDescription":"Run specified `cargo check` command for diagnostics on save."},"rust-analyzer.lens.implementations.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set."},"rust-analyzer.checkOnSave.extraArgs":{"type":"array","default":[],"items":{"type":"string"},"markdownDescription":"Extra arguments for `cargo check`."},"$generated-end":{},"rust-analyzer.checkOnSave.features":{"anyOf":[{"type":"string","enumDescriptions":["Pass `--all-features` to cargo"],"enum":["all"]},{"type":"array","items":{"type":"string"}},{"type":"null"}],"default":null,"markdownDescription":"List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo."},"rust-analyzer.cargo.buildScripts.overrideCommand":{"type":["null","array"],"default":null,"items":{"type":"string"},"markdownDescription":"Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets\n```\n."},"rust-analyzer.checkOnSave.noDefaultFeatures":{"type":["null","boolean"],"default":null,"markdownDescription":"Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`."},"rust-analyzer.cargo.features":{"anyOf":[{"type":"string","enumDescriptions":["Pass `--all-features` to cargo"],"enum":["all"]},{"type":"array","items":{"type":"string"}}],"default":[],"markdownDescription":"List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo."},"rust-analyzer.checkOnSave.overrideCommand":{"type":["null","array"],"default":null,"items":{"type":"string"},"markdownDescription":"Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefor include `--message-format=json` or a similar option.\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects, this command is invoked for\neach of them, with the working directory being the project root\n(i.e., the folder containing the `Cargo.toml`).\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n."},"rust-analyzer.inlayHints.bindingModeHints.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to show inlay type hints for binding modes."},"rust-analyzer.checkOnSave.target":{"type":["null","string"],"default":null,"markdownDescription":"Check for a specific target. Defaults to\n`#rust-analyzer.cargo.target#`."},"rust-analyzer.inlayHints.closureReturnTypeHints.enable":{"enum":["always","never","with_block"],"type":"string","default":"never","enumDescriptions":["Always show type hints for return types of closures.","Never show type hints for return types of closures.","Only show type hints for return types of closures with blocks."],"markdownDescription":"Whether to show inlay type hints for return types of closures."},"rust-analyzer.completion.autoimport.enable":{"type":"boolean","default":true,"markdownDescription":"Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled."},"rust-analyzer.inlayHints.closingBraceHints.minLines":{"type":"integer","default":25,"minimum":0,"markdownDescription":"Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them)."},"rust-analyzer.completion.autoself.enable":{"type":"boolean","default":true,"markdownDescription":"Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method."},"rust-analyzer.inlayHints.closingBraceHints.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show inlay hints after a closing `}` to indicate what item it belongs to."},"rust-analyzer.completion.callable.snippets":{"enum":["fill_arguments","add_parentheses","none"],"type":"string","default":"fill_arguments","enumDescriptions":["Add call parentheses and pre-fill arguments.","Add call parentheses.","Do no snippet completions for callables."],"markdownDescription":"Whether to add parenthesis and argument snippets when completing function."},"rust-analyzer.inlayHints.chainingHints.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show inlay type hints for method chains."},"rust-analyzer.inlayHints.lifetimeElisionHints.enable":{"enum":["always","never","skip_trivial"],"type":"string","default":"never","enumDescriptions":["Always show lifetime elision hints.","Never show lifetime elision hints.","Only show lifetime elision hints if a return type is involved."],"markdownDescription":"Whether to show inlay type hints for elided lifetimes in function signatures."},"rust-analyzer.hover.actions.references.enable":{"type":"boolean","default":false,"markdownDescription":"Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set."},"rust-analyzer.cargo.buildScripts.useRustcWrapper":{"type":"boolean","default":true,"markdownDescription":"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things."},"rust-analyzer.trace.extension":{"type":"boolean","default":false,"description":"Enable logging of VS Code extensions itself."},"rust-analyzer.debug.engine":{"enum":["auto","vadimcn.vscode-lldb","ms-vscode.cpptools"],"description":"Preferred debug engine.","type":"string","default":"auto","markdownEnumDescriptions":["First try to use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb), if it's not installed try to use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools).","Use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb)","Use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools)"]},"rust-analyzer.completion.postfix.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show postfix snippets like `dbg`, `if`, `not`, etc."},"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames":{"type":"boolean","default":false,"markdownDescription":"Whether to prefer using parameter names as the name for elided lifetime hints if possible."},"rust-analyzer.completion.privateEditable.enable":{"type":"boolean","default":false,"markdownDescription":"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position."},"rust-analyzer.inlayHints.maxLength":{"type":["null","integer"],"default":25,"minimum":0,"markdownDescription":"Maximum length for inlay hints. Set to null to have an unlimited length."},"rust-analyzer.completion.snippets.custom":{"type":"object","default":{"Arc::new":{"postfix":"arc","requires":"std::sync::Arc","body":"Arc::new(${receiver})","scope":"expr","description":"Put the expression into an `Arc`"},"Box::pin":{"postfix":"pinbox","requires":"std::boxed::Box","body":"Box::pin(${receiver})","scope":"expr","description":"Put the expression into a pinned `Box`"},"Some":{"body":"Some(${receiver})","postfix":"some","description":"Wrap the expression in an `Option::Some`","scope":"expr"},"Rc::new":{"postfix":"rc","requires":"std::rc::Rc","body":"Rc::new(${receiver})","scope":"expr","description":"Put the expression into an `Rc`"},"Ok":{"body":"Ok(${receiver})","postfix":"ok","description":"Wrap the expression in a `Result::Ok`","scope":"expr"},"Err":{"body":"Err(${receiver})","postfix":"err","description":"Wrap the expression in a `Result::Err`","scope":"expr"}},"markdownDescription":"Custom completion snippets."},"rust-analyzer.inlayHints.parameterHints.enable":{"type":"boolean","default":true,"markdownDescription":"Whether to show function parameter name inlay hints at the call\nsite."}},"$schema":"http:\/\/json-schema.org\/draft-07\/schema#","description":"Rust language support for Visual Studio Code"}