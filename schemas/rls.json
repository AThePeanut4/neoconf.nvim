{"properties": {"rust.build_command": {"description": "EXPERIMENTAL (requires `unstable_features`)\nIf set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. \nImplies `rust.build_on_save`: true.", "scope": "resource", "type": ["string", "null"], "default": null}, "rust.wait_to_build": {"description": "Time in milliseconds between receiving a change notification and starting build.", "scope": "resource", "type": ["number", "null"], "default": null}, "rust.rustflags": {"description": "Flags added to RUSTFLAGS.", "scope": "resource", "type": ["string", "null"], "default": null}, "rust-client.disableRustup": {"description": "Disable usage of rustup and use rustc/rls/rust-analyzer from PATH.", "type": "boolean", "default": false}, "rust.rust-analyzer.releaseTag": {"description": "Which binary release to download and use", "type": "string", "default": "nightly"}, "rust.full_docs": {"description": "Instructs cargo to enable full documentation extraction during save-analysis while building the crate.", "scope": "resource", "type": ["boolean", "null"], "default": null}, "rust-client.channel": {"description": "Rust channel to invoke rustup with. Ignored if rustup is disabled. By default, uses the same channel as your currently open project.", "anyOf": [{"type": "string"}, {"enum": ["default", "stable", "beta", "nightly"], "type": "string", "enumDescriptions": ["Uses the same channel as your currently open project", "Explicitly use the `stable` channel", "Explicitly use the `beta` channel", "Explicitly use the `nightly` channel"]}], "default": "default"}, "rust-client.autoStartRls": {"description": "Start RLS automatically when opening a file or project.", "scope": "resource", "type": "boolean", "default": true}, "rust.show_warnings": {"description": "Show warnings.", "scope": "resource", "type": "boolean", "default": true}, "rust-client.rlsPath": {"description": "Override RLS path. Only required for RLS developers. If you set this and use rustup, you should also set `rust-client.channel` to ensure your RLS sees the right libraries. If you don't use rustup, make sure to set `rust-client.disableRustup`.", "scope": "machine", "type": ["string", "null"], "default": null}, "rust-client.updateOnStartup": {"description": "Update the Rust toolchain and its required components whenever the extension starts up.", "type": "boolean", "default": false}, "rust.ignore_deprecation_warning": {"description": "Whether to surpress the deprecation notification on start up.", "type": "boolean", "default": false}, "rust.all_targets": {"description": "Checks the project as if you were running cargo check --all-targets (I.e., check all targets and integration tests too).", "scope": "resource", "type": "boolean", "default": true}, "rust.target_dir": {"description": "When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.", "scope": "resource", "type": ["string", "null"], "default": null}, "rust.cfg_test": {"description": "Build cfg(test) code. (unstable)", "scope": "resource", "type": "boolean", "default": false}, "rust.show_hover_context": {"description": "Show additional context in hover tooltips when available. This is often the type local variable declaration.", "scope": "resource", "type": "boolean", "default": true}, "rust-client.logToFile": {"description": "When set to true, RLS stderr is logged to a file at workspace root level. Requires reloading extension after change.", "type": "boolean", "default": false}, "rust.all_features": {"description": "Enable all Cargo features.", "scope": "resource", "type": "boolean", "default": false}, "rust.target": {"description": "--target", "scope": "resource", "type": ["string", "null"], "default": null}, "rust-client.rustupPath": {"description": "Path to rustup executable. Ignored if rustup is disabled.", "scope": "machine", "type": "string", "default": "rustup"}, "rust.racer_completion": {"description": "Enables code completion using racer.", "scope": "resource", "type": "boolean", "default": true}, "rust.no_default_features": {"description": "Do not enable default Cargo features.", "scope": "resource", "type": "boolean", "default": false}, "rust.build_lib": {"description": "Specify to run analysis as if running `cargo check --lib`. Use `null` to auto-detect. (unstable)", "scope": "resource", "type": ["boolean", "null"], "default": null}, "rust.clippy_preference": {"description": "Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive):\n - \"off\": Disable clippy lints.\n - \"on\": Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).\n - \"opt-in\": Only display the lints explicitly enabled in the code. Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.\nYou need to install clippy via rustup if you haven't already.", "enum": ["on", "opt-in", "off"], "scope": "resource", "type": "string", "default": "opt-in"}, "rust.clear_env_rust_log": {"description": "Clear the RUST_LOG environment variable before running rustc or cargo.", "scope": "resource", "type": "boolean", "default": true}, "rust-client.revealOutputChannelOn": {"description": "Specifies message severity on which the output channel will be revealed. Requires reloading extension after change.", "enum": ["info", "warn", "error", "never"], "type": "string", "default": "never"}, "rust-client.enableMultiProjectSetup": {"description": "Allow multiple projects in the same folder, along with removing the constraint that the cargo.toml must be located at the root. (Experimental: might not work for certain setups)", "type": ["boolean", "null"], "default": null}, "rust.unstable_features": {"description": "Enable unstable features.", "scope": "resource", "type": "boolean", "default": false}, "rust-client.trace.server": {"description": "Traces the communication between VS Code and the Rust language server.", "enum": ["off", "messages", "verbose"], "scope": "window", "type": "string", "default": "off"}, "rust-client.engine": {"description": "The underlying LSP server used to provide IDE support for Rust projects.", "enum": ["rls", "rust-analyzer"], "scope": "window", "type": "string", "enumDescriptions": ["Use the Rust Language Server (RLS)", "Use the rust-analyzer language server (NOTE: not fully supported yet)"], "default": "rls"}, "rust.crate_blacklist": {"description": "Overrides the default list of packages for which analysis is skipped.\nAvailable since RLS 1.38", "scope": "resource", "type": ["array", "null"], "default": ["cocoa", "gleam", "glium", "idna", "libc", "openssl", "rustc_serialize", "serde", "serde_json", "typenum", "unicode_normalization", "unicode_segmentation", "winapi"]}, "rust.build_bin": {"description": "Specify to run analysis as if running `cargo check --bin <name>`. Use `null` to auto-detect. (unstable)", "scope": "resource", "type": ["string", "null"], "default": null}, "rust.rust-analyzer": {"description": "Settings passed down to rust-analyzer server", "scope": "resource", "type": "object", "default": {}}, "rust.jobs": {"description": "Number of Cargo jobs to be run in parallel.", "scope": "resource", "type": ["number", "null"], "default": null}, "rust.build_on_save": {"description": "Only index the project when a file is saved and not on change.", "scope": "resource", "type": "boolean", "default": false}, "rust.sysroot": {"description": "--sysroot", "scope": "resource", "type": ["string", "null"], "default": null}, "rust.rust-analyzer.path": {"description": "When specified, uses the rust-analyzer binary at a given path", "type": ["string", "null"], "default": null}, "rust.features": {"description": "A list of Cargo features to enable.", "scope": "resource", "type": "array", "default": []}, "rust.rustfmt_path": {"description": "When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one", "scope": "resource", "type": ["string", "null"], "default": null}}, "description": "Rust for Visual Studio Code (powered by Rust Language Server/Rust Analyzer). Provides lints, code completion and navigation, formatting and more.", "$schema": "http://json-schema.org/draft-07/schema#"}