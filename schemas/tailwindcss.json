{"properties":{"tailwindCSS.lint.invalidApply":{"enum":["ignore","warning","error"],"type":"string","default":"error","scope":"language-overridable","markdownDescription":"Unsupported use of the [`@apply` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#apply)"},"tailwindCSS.lint.invalidScreen":{"enum":["ignore","warning","error"],"type":"string","default":"error","scope":"language-overridable","markdownDescription":"Unknown screen name used with the [`@screen` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#screen)"},"tailwindCSS.lint.invalidVariant":{"enum":["ignore","warning","error"],"type":"string","default":"error","scope":"language-overridable","markdownDescription":"Unknown variant name used with the [`@variants` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#variants)"},"tailwindCSS.lint.invalidConfigPath":{"enum":["ignore","warning","error"],"type":"string","default":"error","scope":"language-overridable","markdownDescription":"Unknown or invalid path used with the [`theme` helper](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#theme)"},"tailwindCSS.lint.invalidTailwindDirective":{"enum":["ignore","warning","error"],"type":"string","default":"error","scope":"language-overridable","markdownDescription":"Unknown value used with the [`@tailwind` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#tailwind)"},"tailwindCSS.lint.recommendedVariantOrder":{"enum":["ignore","warning","error"],"type":"string","default":"warning","scope":"language-overridable","markdownDescription":"Class variants not in the recommended order (applies in [JIT mode](https:\/\/tailwindcss.com\/docs\/just-in-time-mode) only)"},"tailwindCSS.includeLanguages":{"type":"object","default":{},"additionalProperties":{"type":"string"},"markdownDescription":"Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{\"plaintext\": \"html\"}`"},"tailwindCSS.experimental.configFile":{"type":["null","string","object"],"default":null,"markdownDescription":"Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to."},"tailwindCSS.files.exclude":{"type":"array","default":["**\/.git\/**","**\/node_modules\/**","**\/.hg\/**"],"markdownDescription":"Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `#files.exclude#` setting.","items":{"type":"string"}},"tailwindCSS.showPixelEquivalents":{"type":"boolean","default":true,"markdownDescription":"Show `px` equivalents for `rem` CSS values."},"tailwindCSS.classAttributes":{"type":"array","default":["class","className","ngClass"],"markdownDescription":"The HTML attributes for which to provide class completions, hover previews, linting etc.","items":{"type":"string"}},"tailwindCSS.suggestions":{"type":"boolean","default":true,"scope":"language-overridable","markdownDescription":"Enable autocomplete suggestions."},"tailwindCSS.hovers":{"type":"boolean","default":true,"scope":"language-overridable","markdownDescription":"Enable hovers."},"tailwindCSS.rootFontSize":{"type":"number","default":16,"markdownDescription":"Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `#tailwindCSS.showPixelEquivalents#`."},"tailwindCSS.codeActions":{"type":"boolean","default":true,"scope":"language-overridable","markdownDescription":"Enable code actions."},"tailwindCSS.inspectPort":{"type":["number","null"],"default":null,"markdownDescription":"Enable the Node.js inspector agent for the language server and listen on the specified port."},"tailwindCSS.colorDecorators":{"type":"boolean","default":true,"scope":"language-overridable","markdownDescription":"Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions."},"tailwindCSS.validate":{"type":"boolean","default":true,"scope":"language-overridable","markdownDescription":"Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings"},"tailwindCSS.experimental.classRegex":{"type":"array","scope":"language-overridable"},"tailwindCSS.lint.cssConflict":{"enum":["ignore","warning","error"],"type":"string","default":"warning","scope":"language-overridable","markdownDescription":"Class names on the same HTML element which apply the same CSS property or properties"},"tailwindCSS.emmetCompletions":{"type":"boolean","default":false,"markdownDescription":"Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`"}},"$schema":"http:\/\/json-schema.org\/draft-07\/schema#","description":"Intelligent Tailwind CSS tooling for VS Code"}