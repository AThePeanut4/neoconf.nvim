{"properties":{"deno.internalDebug":{"examples":[true,false],"type":"boolean","default":false,"scope":"window","markdownDescription":"Determines if the internal debugging information for the Deno language server will be logged to the _Deno Language Server_ console."},"deno.certificateStores":{"items":{"type":"string"},"type":"array","default":null,"scope":"window","markdownDescription":"A list of root certificate stores used to validate TLS certificates when fetching and caching remote resources. This overrides the `DENO_TLS_CA_STORE` environment variable if set."},"deno.codeLens.implementations":{"examples":[true,false],"type":"boolean","default":false,"scope":"window","markdownDescription":"Enables or disables the display of code lens information for implementations of items in the code."},"deno.codeLens.references":{"examples":[true,false],"type":"boolean","default":false,"scope":"window","markdownDescription":"Enables or disables the display of code lens information for references of items in the code."},"deno.codeLens.referencesAllFunctions":{"examples":[true,false],"type":"boolean","default":false,"scope":"window","markdownDescription":"Enables or disables the display of code lens information for all functions in the code."},"deno.codeLens.test":{"type":"boolean","default":false,"scope":"resource","markdownDescription":"Enables or disables the display of code lenses that allow running of individual tests in the code."},"deno.codeLens.testArgs":{"items":{"type":"string"},"type":"array","default":["--allow-all","--no-check"],"scope":"resource","markdownDescription":"Additional arguments to use with the run test code lens.  Defaults to `[ \"--allow-all\", \"--no-check\" ]`."},"deno.suggest.paths":{"type":"boolean","default":true,"scope":"window"},"deno.suggest.imports.autoDiscover":{"type":"boolean","default":true,"scope":"window","markdownDescription":"If enabled, when new hosts\/origins are encountered that support import suggestions, you will be prompted to enable or disable it.  Defaults to `true`."},"deno.config":{"examples":[".\/deno.jsonc","\/path\/to\/deno.jsonc","C:\\path\\to\\deno.jsonc"],"type":"string","default":null,"scope":"window","markdownDescription":"The file path to a configuration file. This is the equivalent to using `--config` on the command line. The path can be either be relative to the workspace, or an absolute path.\n\nIt is recommend you name it `deno.json` or `deno.jsonc`.\n\n**Not recommended to be set globally.**"},"deno.cache":{"type":"string","default":null,"scope":"window","markdownDescription":"A path to the cache directory for Deno. By default, the operating system's cache path plus `deno` is used, or the `DENO_DIR` environment variable, but if set, this path will be used instead."},"deno.unstable":{"examples":[true,false],"type":"boolean","default":false,"scope":"window","markdownDescription":"Controls if code will be type checked with Deno's unstable APIs. This is the equivalent to using `--unstable` on the command line.\n\n**Not recommended to be enabled globally.**"},"deno.unsafelyIgnoreCertificateErrors":{"items":{"type":"string"},"type":"array","default":null,"scope":"window","markdownDescription":"**DANGER** disables verification of TLS certificates for the hosts provided. There is likely a better way to deal with any errors than use this option. This is like using `--unsafely-ignore-certificate-errors` in the Deno CLI."},"deno.importMap":{"examples":[".\/import_map.json","\/path\/to\/import_map.json","C:\\path\\to\\import_map.json"],"type":"string","default":null,"scope":"window","markdownDescription":"The file path to an import map. This is the equivalent to using `--import-map` on the command line.\n\n[Import maps](https:\/\/deno.land\/manual@v1.6.0\/linking_to_external_code\/import_maps) provide a way to \"relocate\" modules based on their specifiers. The path can either be relative to the workspace, or an absolute path.\n\n**Not recommended to be set globally.**"},"deno.testing.args":{"items":{"type":"string"},"type":"array","default":["--allow-all","--no-check"],"scope":"window","markdownDescription":"Arguments to use when running tests via the Test Explorer.  Defaults to `[ \"--allow-all\" ]`."},"deno.enable":{"examples":[true,false],"type":"boolean","default":false,"scope":"resource","markdownDescription":"Controls if the Deno Language Server is enabled. When enabled, the extension will disable the built-in VSCode JavaScript and TypeScript language services, and will use the Deno Language Server instead.\n\nIf you want to enable only part of your workspace folder, consider using `deno.enablePaths` setting instead.\n\n**Not recommended to be enabled globally.**"},"deno.testing.enable":{"type":"boolean","default":true,"scope":"window","markdownDescription":"Enable the testing API for the language server. When folder is Deno enabled, tests will be available in the Test Explorer view."},"deno.tlsCertificate":{"type":"string","default":null,"scope":"window","markdownDescription":"A path to a PEM certificate to use as the certificate authority when validating TLS certificates when fetching and caching remote resources. This is like using `--cert` on the Deno CLI and overrides the `DENO_CERT` environment variable if set."},"deno.suggest.autoImports":{"type":"boolean","default":true,"scope":"window"},"deno.suggest.completeFunctionCalls":{"type":"boolean","default":false,"scope":"window"},"deno.suggest.names":{"type":"boolean","default":true,"scope":"window"},"deno.path":{"examples":["\/usr\/bin\/deno","C:\\Program Files\\deno\\deno.exe"],"type":"string","default":null,"scope":"window","markdownDescription":"A path to the `deno` CLI executable. By default, the extension looks for `deno` in the `PATH`, but if set, will use the path specified instead."},"deno.suggest.imports.hosts":{"examples":{"https:\/\/deno.land":true},"type":"object","default":{"https:\/\/deno.land":true,"https:\/\/x.nest.land":true,"https:\/\/crux.land":true},"scope":"window","markdownDescription":"Controls which hosts are enabled for import suggestions."},"deno.lint":{"examples":[true,false],"type":"boolean","default":true,"scope":"window","markdownDescription":"Controls if linting information will be provided by the Deno Language Server.\n\n**Not recommended to be enabled globally.**"},"deno.enablePaths":{"examples":[[".\/worker"]],"items":{"type":"string"},"type":"array","default":[],"scope":"resource","markdownDescription":"Enables the Deno Language Server for specific paths, instead of for the whole workspace folder. This will disable the built in TypeScript\/JavaScript language server for those paths.\n\nWhen a value is set, the value of `\"deno.enable\"` is ignored.\n\nThe workspace folder is used as the base for the supplied paths. If for example you have all your Deno code in `worker` path in your workspace, you can add an item with the value of `.\/worker`, and the Deno will only provide diagnostics for the files within `worker` or any of its sub paths.\n\n**Not recommended to be enabled in user settings.**"}},"$schema":"http:\/\/json-schema.org\/draft-07\/schema#","description":"A language server client for Deno."}