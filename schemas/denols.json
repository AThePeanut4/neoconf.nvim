{"properties": {"deno.importMap": {"examples": ["./import_map.json", "/path/to/import_map.json", "C:\\path\\to\\import_map.json"], "scope": "window", "type": "string", "markdownDescription": "The file path to an import map. This is the equivalent to using `--import-map` on the command line.\n\n[Import maps](https://deno.land/manual@v1.6.0/linking_to_external_code/import_maps) provide a way to \"relocate\" modules based on their specifiers. The path can either be relative to the workspace, or an absolute path.\n\n**Not recommended to be set globally.**", "default": null}, "deno.codeLens.testArgs": {"scope": "resource", "type": "array", "markdownDescription": "Additional arguments to use with the run test code lens.  Defaults to `[ \"--allow-all\", \"--no-check\" ]`.", "default": ["--allow-all", "--no-check"], "items": {"type": "string"}}, "deno.suggest.completeFunctionCalls": {"scope": "window", "type": "boolean", "default": false}, "deno.codeLens.implementations": {"examples": [true, false], "scope": "window", "type": "boolean", "markdownDescription": "Enables or disables the display of code lens information for implementations of items in the code.", "default": false}, "deno.codeLens.referencesAllFunctions": {"examples": [true, false], "scope": "window", "type": "boolean", "markdownDescription": "Enables or disables the display of code lens information for all functions in the code.", "default": false}, "deno.suggest.imports.hosts": {"examples": {"https://deno.land": true}, "scope": "window", "type": "object", "markdownDescription": "Controls which hosts are enabled for import suggestions.", "default": {"https://deno.land": true, "https://crux.land": true, "https://x.nest.land": true}}, "deno.config": {"examples": ["./deno.jsonc", "/path/to/deno.jsonc", "C:\\path\\to\\deno.jsonc"], "scope": "window", "type": "string", "markdownDescription": "The file path to a configuration file. This is the equivalent to using `--config` on the command line. The path can be either be relative to the workspace, or an absolute path.\n\nIt is recommend you name it `deno.json` or `deno.jsonc`.\n\n**Not recommended to be set globally.**", "default": null}, "deno.unstable": {"examples": [true, false], "scope": "window", "type": "boolean", "markdownDescription": "Controls if code will be type checked with Deno's unstable APIs. This is the equivalent to using `--unstable` on the command line.\n\n**Not recommended to be enabled globally.**", "default": false}, "deno.enable": {"examples": [true, false], "scope": "resource", "type": "boolean", "markdownDescription": "Controls if the Deno Language Server is enabled. When enabled, the extension will disable the built-in VSCode JavaScript and TypeScript language services, and will use the Deno Language Server instead.\n\nIf you want to enable only part of your workspace folder, consider using `deno.enablePaths` setting instead.\n\n**Not recommended to be enabled globally.**", "default": false}, "deno.suggest.imports.autoDiscover": {"scope": "window", "type": "boolean", "markdownDescription": "If enabled, when new hosts/origins are encountered that support import suggestions, you will be prompted to enable or disable it.  Defaults to `true`.", "default": true}, "deno.codeLens.references": {"examples": [true, false], "scope": "window", "type": "boolean", "markdownDescription": "Enables or disables the display of code lens information for references of items in the code.", "default": false}, "deno.cache": {"scope": "window", "type": "string", "markdownDescription": "A path to the cache directory for Deno. By default, the operating system's cache path plus `deno` is used, or the `DENO_DIR` environment variable, but if set, this path will be used instead.", "default": null}, "deno.codeLens.test": {"scope": "resource", "type": "boolean", "markdownDescription": "Enables or disables the display of code lenses that allow running of individual tests in the code.", "default": false}, "deno.internalDebug": {"examples": [true, false], "scope": "window", "type": "boolean", "markdownDescription": "Determines if the internal debugging information for the Deno language server will be logged to the _Deno Language Server_ console.", "default": false}, "deno.path": {"examples": ["/usr/bin/deno", "C:\\Program Files\\deno\\deno.exe"], "scope": "window", "type": "string", "markdownDescription": "A path to the `deno` CLI executable. By default, the extension looks for `deno` in the `PATH`, but if set, will use the path specified instead.", "default": null}, "deno.suggest.paths": {"scope": "window", "type": "boolean", "default": true}, "deno.lint": {"examples": [true, false], "scope": "window", "type": "boolean", "markdownDescription": "Controls if linting information will be provided by the Deno Language Server.\n\n**Not recommended to be enabled globally.**", "default": true}, "deno.suggest.names": {"scope": "window", "type": "boolean", "default": true}, "deno.enablePaths": {"examples": [["./worker"]], "scope": "resource", "type": "array", "markdownDescription": "Enables the Deno Language Server for specific paths, instead of for the whole workspace folder. This will disable the built in TypeScript/JavaScript language server for those paths.\n\nWhen a value is set, the value of `\"deno.enable\"` is ignored.\n\nThe workspace folder is used as the base for the supplied paths. If for example you have all your Deno code in `worker` path in your workspace, you can add an item with the value of `./worker`, and the Deno will only provide diagnostics for the files within `worker` or any of its sub paths.\n\n**Not recommended to be enabled in user settings.**", "default": [], "items": {"type": "string"}}, "deno.certificateStores": {"scope": "window", "type": "array", "markdownDescription": "A list of root certificate stores used to validate TLS certificates when fetching and caching remote resources. This overrides the `DENO_TLS_CA_STORE` environment variable if set.", "default": null, "items": {"type": "string"}}, "deno.testing.args": {"scope": "window", "type": "array", "markdownDescription": "Arguments to use when running tests via the Test Explorer.  Defaults to `[ \"--allow-all\" ]`.", "default": ["--allow-all", "--no-check"], "items": {"type": "string"}}, "deno.unsafelyIgnoreCertificateErrors": {"scope": "window", "type": "array", "markdownDescription": "**DANGER** disables verification of TLS certificates for the hosts provided. There is likely a better way to deal with any errors than use this option. This is like using `--unsafely-ignore-certificate-errors` in the Deno CLI.", "default": null, "items": {"type": "string"}}, "deno.testing.enable": {"scope": "window", "type": "boolean", "markdownDescription": "Enable the testing API for the language server. When folder is Deno enabled, tests will be available in the Test Explorer view.", "default": true}, "deno.tlsCertificate": {"scope": "window", "type": "string", "markdownDescription": "A path to a PEM certificate to use as the certificate authority when validating TLS certificates when fetching and caching remote resources. This is like using `--cert` on the Deno CLI and overrides the `DENO_CERT` environment variable if set.", "default": null}, "deno.suggest.autoImports": {"scope": "window", "type": "boolean", "default": true}}, "description": "A language server client for Deno.", "$schema": "http://json-schema.org/draft-07/schema#"}